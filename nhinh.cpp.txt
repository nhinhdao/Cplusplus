/* Nhinh Dao
13600
03/01/2018
lab5
Is divisible
***
***
***
***
***
***
***
***
compile with g++ numbers.cpp -o number */
#include <iostream>
using namespace std;
bool isDivisibleBy(int n, int d);
bool test_isDivisibleBy();
bool isPrime(int t);
bool test_isPrime();
bool nextPrime(int k);
bool test_nextPrime();
int nextprime = 0;

int main() {     
        bool res = test_isDivisibleBy();
        cout << "TESTING isDivisibleBy" << endl;
        if (!res) {
        cout << "FAILED TESTS" << endl;
        }
        else { cout << "PASSED TESTS" << endl;
        }
        bool res2 = test_isPrime();
        cout << "TESTING isPrime" << endl;
        if (!res2) {
        cout << "Not Prime" << endl;
        }
        else { cout << "Is Prime" << endl;
        }
	int res3 = test_nextPrime();
	if (res3 != j){
	cout << "Not Found" << endl;
	}
	else {
	cout << "Found smallest prime number greater than " << k << " is " << j ;
	}
        return 0;
}       
         
bool isDivisibleBy(int n, int d){
        if (d == 0){
                cout << "Division by ZERO!" << endl;
                return false;
                }
        return (n%d==0);
}
bool test_isDivisibleBy(){
        const int LEN = 3;
        int test_n[LEN] = {0,1,4};
        int test_d[LEN] = {1,0,-2};
        bool res[LEN] = {true, false, true};
        bool pass = false;
        bool allpass = true;
        for (int i = 0; i < LEN; i++){
                 pass = isDivisibleBy(test_n[i], test_d[i]) == res[i];
                 allpass = pass && allpass;
                 if(!pass){
                 cout << "n:" << test_n[i] << "\td" << test_d[i] << "expected" << res[i]
                  << endl;
                 }
        }
        return allpass;
}
bool isPrime(int t){
        if (t <= 0 || t == 1) {
                cout << "0 or 1 is not prime number";
                return false;
         }
         for (int e = 2; e < t - 1; e++){
                if ( t % e == 0) {
                        cout << t << " is not a prime number" << endl;
                        return false;
                }
         }
         cout << t << " is a prime number" << endl;
         return true;     
}
bool test_isPrime(){
         const int LEN = 5;
         int test_t[LEN] = {7, 9, 12, 13, 26};
         bool res2[LEN] = {false, false, false, true, false};
         bool pass = false;
         bool allpass = true;
         for (int i = 0; i < LEN; i++){
                pass = isPrime(test_t[i]) == res2[i];
                allpass = allpass && pass;
                if (!pass){
                        cout << "Test " << test_t[i] << " expected " << res2[i]
                        << endl;
                }
         }          
}              
int nextPrime(int k){
	for (int j = k + 1; j < 2k; j++){
		for (int e = 2; e < j - 1; e++){
			if (j <= 1 || j % e == 0){
				return 0;
			}
		return j;
		}
	}
}
int test_nextPrime(int k){
	const int LEN = 3;
	int test_k[LEN] = {10, 15, 20];
	int res3[LEN] = {11, 17, 23};
	int pass = 0;
	for (int i = 0; i < LEN; i++){
		pass = nextPrime(test_k[i]) == res3[i];
		if (pass != j){
			cout << "Test " << test_k[i] << " expected " << res3[i]
                        << endl;
		}
	}
}	